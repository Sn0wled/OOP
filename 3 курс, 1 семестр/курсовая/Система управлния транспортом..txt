Система управлния транспортом.
Главный управляемый элемент данной система - транспортное средство. Это механическое устройство или средство на колесном ходу, предназначенное для перевозки людей или грузов из одного места в другое.
Транспортные средства могут быть разными по типу, размеру, назначению и характеристикам. Некоторые из наиболее распространенных видов транспортных средств включают:
- Водный транспорт;
- Автомобиль;
- Железнодорожный транспорт;
- Воздушное судно;

Основная функция транспорта выполнять перевозки пассажиров или грузов.
Перевозки делятся на следующие 3 типа:
- перевозки в прямом сообщении - это перевозка грузов или пассажиров одним транспортным средством без пересадок или перегрузок в пути;
- перевозки в смешанном сообщении  - это перевозки несколькими видами транспорта;
- перевозки с пересадкой  - перевозка одним видом транспорта с пересадкой пассажиров или перегрузок грузов в пути.

Любая перевозка состоит из одной и более перевозок в прямом сообщении. При этом перевозку может осуществлять как один транспорт, так и несколько.
План перевозок составляет диспетчер. Он же ими управляет и реагирует в непредвиденных ситуациях.

Для водителя задание о перевозке делится на 2 пункта:
1. Приехать на начальную точку и дождаться погрузки или посадки
2. Приехать на конечную точку и дождаться отгрузки или высадки

Составляя перевозку, диспетчер указывает откуда и куда должен поехать каждый транспорт, учавствующий в данной перевозке. То есть он указывает два местоположения (координаты).

Во время перевозки диспетчер может отслеживать местоположение (координаты) транспорта и изменять или удалять перевозки.

Анализ предметной области

В рамках данной предметной области используются такие понятия, как транспортное средство, водный транспорт, автомобиль, железнодорожный транспорт, воздушное судно, перевозка, перевозка в прямом сообщении, пользователь системы, диспетчер, водитель, точка, начальная точка, конечная точка, координаты.

Транспортное средство выполняет перевозку и управляется водителем. Может перемещаться с одной точки на другую. Имеет координаты.
Водный транспорт, автомобиль, железнодорожный транспорт и воздушное  судно - виды транспорта. Отличаются между собой способом перемещения по точкам.
Перевозка - Планируемое диспетчером и выполняемое одним или несколькими транспортными средствами действие. Состоит из водительских перевозок.
Перевозка в прямом сообщении - перевозка отдельного водителя, выполняемая транспортным средством от начальной точки до конечной.
Пользователь системы - может регистрироваться и входить в систему, а так же выполнять предписанные его ролью в системе действия.
Диспетчер - пользователь системы, управляющий и следящий за перевозками.
Водитель - пользователь системы, принимающий и осуществляющий, посредством транспортного средства, перевозки.
Точка - место, в котором транспорт находится или куда может прибыть. Имеет координаты и название.
Начальная точка - точка, в которой начинается перевозка.
Конечная точка - точка, в которой перевозка заканчивается.
Координаты - два вещественных числа, обозначающие положение в пространстве.

Задание:
Спроектировать и разработать систему, позволяющую:
- хранить, создавать, удалять, редактировать и отслеживать перевозки
- отслеживать и предоставлять информацию о положении транспортного средства
- хранить, добавлять и удалять имеющиеся у владельца системы транспорные средства
- хранить, создавать, редактировать и удалять перевозки
- предоставлять информацию о имеющихся перевозках
- регистрировать, хранить учетные записи
- позволять пользователю войти в систему
- предоставлять пользователю соответствующий его роли функционал системы
- автоматически начинать перевозку по прибытии транспортного средства на начальную точку
- автоматически заканчивать перевозку по прибытии транспортного средства на конечную точку
- узнавать начальную и конечную точки перевозки
- присваивать и отнимать у водителя транспорт

Пользователи, транспортные средства и перевозки должны иметь уникальный среди оставльных идентификационный номер.

Анализируя данные требования, было решено разбить исходную систему на такие подсистемы, как:
- система авторизации
- система транспортных средств
- система перевозок

Далее часть функций системы распределена между подсистемами

Функции системы авторизации:
- добавлять новых пользователей
- хранить учетные записи пользователей
- удалять пользователей
- позволять пользователю входить в систему

Функции системы транспортных средств:
- добавлять новые транспортные средства
- хранить транспортные средства
- удалять транспортные средства из системы
- отслеживать транспортное средство
- предоставлять информацию о положении транспортного средства
- предоставлять информацию обо всех имеющихся транспортных средствах

Функции системы перевозок:
- создавать новые перевозки
- хранить перевозки
- удалять перевозки
- редактировать перевозки
- предоставлять информацию о имеющихся перевозках
- автоматически начинать перевозку по прибытии транспортного средства на начальную точку
- автоматически заканчивать перевозку по прибытии транспортного средства на конечную точку


Проектируем Use-case диаграмму

Диаграмма вариантов использования или Use-case диаграмма - это диаграмма на которой изображаются варианты использования проектируемой системы и внешние актеры, а так же определенные отношения между актерами и вариантами использования.

Диаграмма вариантов использования предназначена для достижения следующих целей:
- определить общие границы функциональности проектируемой системы в контексте моделируемой предметной области
- специфицировать требования к функциональному поведению проектируемой системы в форме вариантов использования
- разработать исходную концептуальную модель системы для ее последующей детализации в форме логических и физических моделей

Вариант использования (Use case) представляет собой общую спецификацию совокупности выполняемых системой действийс целью достижения результата, который имеет значение для одного или нескольких актеров.
Основные варианты использования описаны в задании к проекту. Создадим их на Use-case диаграмме.
<вставить картинку "варианты использования">

Актер представляет собой любую внешнюю по отношению к проектируемой системе сущность, которая взаимодействует с системой.
В данной системе актерами являются:
- неавторизованный пользователь
- диспетчер
- водитель
- транспортное средство
<картинка "актеры">

Далее расставляем отношения между элементами диаграммы.
<вставить картинку "use-case диаграмма">

Проектируем диаграмму классов

Диаграмма классов - диаграмма, предназначенная для представления модели статической структуры программной системы в терминологии классов объектно-ориентированного программирования.
Цели разработки диаграммы классов:
- определить сущности предметной области и представить их в форме классов с соответствующими атрибутами и операциями
- определить взаимосвязи между сущностями предметной области и представить их в форме типовых отношений между классами
- разработать исходную логическую модель программной системы для ее последующей реализации в форме физических моделей

В данной курсовой работе исходя из предметной области были выделены следующие классы:
- система управления транспортом (TransportManagementSystem)
- система транспорта (TransportSystem)
- система авторизации (AuthorizationSystem)
- система перевозок (TransportationSystem)
- транспортное средство (Vehicle)
- водный транспорт (WaterVehicle)
- воздушное судно (Aircraft)
- автомобиль (Automobile)
- железнодорожный транспорт (RailwayVehicle)
- пользователь (User)
- диспетчер (Dispatcher)
- водитель (Driver)
- точка (Point)
- перевозка (Transportation)
- перевозка в прямом сообщении (DirectTransportation)
- координаты (Coordinates)

Классы транспортное средство и пользователь являются обобщением других классов, поэтому они должны быть абстрактными.

Система транспорта, система авторизации и система перевозок имеют одинаковые функции:
- добавлять в них новые объекты
- хранить объекты
- удалять объекты

Так же объекты, хранящиеся в них должны иметь уникальный идентификатор

Всвязи с этим можно обобщить эти системы и хранящиеся в них объекты до классов:
- UniqueObjectSystem
- UniqueObject

Так как эти классы есть обобщения других классов, то они должны быть абстрактными.


<вставить картинку классы дополненные>

Далее опишем иерархию этих классов

Система управления транспортом содержит в себе систему транспорта, систему авторизации и систему перевозок. Без системы управления транспорта остальные системы в данной предметной области не имеют смысла, поэтому между ними существует отношение композиции.

Система транспорта, система авторизации и система перевозок обобщаются до класса UniqueObject.

Класс UniqueObject содержится в классе UniqueObjectSystem, при этом вне данного класса UniqueObject существовать не может. Поэтому между ними присутствует отношение композиции.

Далее классы транспортное средство, пользователь и перевозка обобщаются до класса UniqueObject.

Классы водный транспорт, воздушное судно, автомобиль и железнодорожный транспорт обобщаются до класса транспортное средство.
В свою очередь каждый транспорт имеет координаты, поэтому между классом транспортное средство и координаты есть отношение композиции.
Так же координаты имеет и точка. Между ними присутствует отношение композиции.

Каждая перевозка состоит из одной и более перевозок в прямом сообщении. Между ними отношение композиции.
Каждая перевозка в прямом сообщении содержит две точки: начальную и конечную. Между ними отношение композиции

Диспетчер и водитель обобщаются до класса пользователь.

Водитель может иметь транспорт, а транспорт может иметь водителя, между ними отношение агрегации.

<вставить картинку иерархия>

Описываем атрибуты классов
Для обеспечения инкапсуляции все атрибуты должны быть закрытыми (private) или защищенными (protected).

Атрибуты класса TransportManagementSystem:
- transportSystem, тип TransportSystem
- authorizationSystem, тип AuthorizationSystem
- transportationSystem, тип TransportationSystem
- currentUser, тип User

Атрибуты классаUniqueObjectSystem:
- uniqueObjectList, тип UniqueObject, кратность 0..*

Атрибуты класса UniqueObject:
- id, тип int

Атрибуты класса User:
- name, тип string

Атрибуты класса Driver:
- vehicle, тип Vehicle, кратность 0..1

Атрибуты класса Vehicle:
- name, тип string
- coords, тип Coordinates
- driver, тип Driver, кратность 0..1
- dTransportation, тип DirectTransportation, кратность 0..1

Атрибуты класса Coordinates:
- latitude, тип double
- longitude, тип double

Атрибуты класса Point:
- name, тип string
- coords, тип Coordinates
Атрибуты класса DirectTransportation:
- startPoint, тип Point
- endPoint, тип Point
- executingVehicle, тип Vehicle
- status, тип int
- vehicle, тип Vehicle

Атрибуты класса Transportation:
dTransportationList, тип DirectTransportation, кратность 1..*

Для взаимодействия с системой, она должна предоставлять пользователю соответствующий его роли интерфейс. Вызов этого интерфейса это операция некоторого класса. Эту операцию можно расположить как в классе самой системе, так и в классе пользователя. Если расположить интерфейс в пользователе, то в систему можно будет добавлять новые классы пользователей и сразу в них определять доступный им функционал, но в этом случае придется передавать операции вызова интерфейса саму систему в качестве аргумента, а в классе системы в свою очередь либо определить все операции подсистем, либо предоставить доступ к этим подсистемам. Второй вариант мне кажется более удачным, ведь в данном случае придется писать меньше кода.

Так же перед тем, как вызывать пользовательский интерфейс, должно вызываться приветственное меню, позволяющее регистрироваться и входить в систему.











